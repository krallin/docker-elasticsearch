#!/bin/bash
set -o errexit
set -o nounset

# ES no longer allows AWS creds to be be passed via request when creating
# a backup respository, but we need to continue doing so since the new way:
# * requires shell access to modify the filesystem
# * cannot be updated at runtime
if dpkg --compare-versions "$ES_VERSION" ge 6; then
  export ES_JAVA_OPTS="-Des.allow_insecure_settings=true ${ES_JAVA_OPTS:-}"
fi

if [[ -n "${ES_HEAP_SIZE:-}" ]]; then
  # If we have an ENV var that sets ES_HEAP_SIZE, then we use that.
  echo "ES_HEAP_SIZE was forced to ${ES_HEAP_SIZE} via configuration!"
elif [[ -n "${APTIBLE_CONTAINER_SIZE:-}" ]]; then
  # However, if APTIBLE_CONTAINER_SIZE is set, then we default the ES Heap Size
  # to half the container size. Leave the rest for Lucene to use via filesystem
  # caches.
  # https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html
  ES_HEAP_SIZE="$((APTIBLE_CONTAINER_SIZE / 2))m"
  echo "ES_HEAP_SIZE is defaulting to to ${ES_HEAP_SIZE}"
fi

if [[ -n "${ES_HEAP_SIZE:-}" ]]; then
  echo "APTIBLE_CONTAINER_SIZE=${APTIBLE_CONTAINER_SIZE:-}, ES_HEAP_SIZE=${ES_HEAP_SIZE}"

  if dpkg --compare-versions "$ES_VERSION" ge 5; then
    # If we're using ES 5, then ES_HEAP_SIZE no longer works, and we need to
    # use the Java heap options instead. We also preserve whatever was in
    # ES_JAVA_OPTS, just in case (while that's unspecified, if there are memory
    # options there, they'll tend to take precedence)
    export ES_JAVA_OPTS="-Xms${ES_HEAP_SIZE} -Xmx${ES_HEAP_SIZE} ${ES_JAVA_OPTS:-}"
    unset ES_HEAP_SIZE
  else
    # If we're using an older version, then we should export that variable (it
    # might already be exported if it came in via the environment, but if we
    # generated it via APTIBLE_CONTAINER_SIZE, it won't).
    export ES_HEAP_SIZE
  fi
fi

# If this version of Elasticsearch supports the keystore, create an emtpy
# keystore and give the Elasticsearch user access. We don't use it to store
# anything, but it needs to be accessible or e.g. the X-Pack won't boot.
KEYSTORE_MANAGER="/elasticsearch/bin/elasticsearch-keystore"
KEYSTORE_FILE="/elasticsearch/config/elasticsearch.keystore"
if [[ -x "$KEYSTORE_MANAGER" ]]; then
  if [[ ! -f "$KEYSTORE_FILE" ]]; then
    "$KEYSTORE_MANAGER" create
  fi
  chown "${ES_USER}:${ES_GROUP}" "$KEYSTORE_FILE"
fi

# Install any user specified plugins

if [[ -n "${ES_PLUGINS:-}" ]]; then
  for PLUGIN in $ES_PLUGINS; do
    if [[ -d "/elasticsearch/plugins/${PLUGIN}" ]]; then
      echo "${PLUGIN} is already installed"
    else
      plugin-install-wrapper "$PLUGIN"
    fi
  done
fi

# Finally, if ELASTICSEARCH_XPACK is set, then install the X-Pack. We don't
# currently allow relying on the X-Pack for authentication (since we have Nginx
# in front), but could so here if there is demand.
if [[ -n "${ELASTICSEARCH_XPACK:-}" ]]; then
  if [[ -d "/elasticsearch/plugins/x-pack" ]]; then
    echo "X-Pack is already installed"
  else
    plugin-install-wrapper "x-pack"
  fi
  echo "xpack.security.enabled: false" >> /elasticsearch/config/elasticsearch.yml
fi

exec sudo -HE -u "$ES_USER" /elasticsearch/bin/elasticsearch "$@"
